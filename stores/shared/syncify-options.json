{
  "$schema": "http://json-schema.org/draft-07/schema",
  "definitions": {
    "input": {
      "type": "string",
      "default": "source",
      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$",
      "markdownDescription": "./descriptions/syncify/options/input.md"
    },
    "output": {
      "type": "string",
      "default": "theme",
      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$",
      "markdownDescription": "./descriptions/syncify/options/output.md"
    },
    "config": {
      "type": "string",
      "default": ".",
      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$",
      "markdownDescription": "./descriptions/syncify/options/config.md"
    },
    "import": {
      "type": "string",
      "default": "import",
      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$",
      "markdownDescription": "./descriptions/syncify/options/import.md"
    },
    "export": {
      "type": "string",
      "default": "export",
      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[a-zA-Z0-9_-]{1,}){0,}$",
      "markdownDescription": "./descriptions/syncify/options/export.md"
    },
    "paths": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "./descriptions/syncify/options/paths.md",
      "default": {},
      "properties": {
        "assets": {
          "markdownDescription": "./descriptions/syncify/options/paths/assets.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "assets/**/*"
        },
        "config": {
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "markdownDescription": "./descriptions/syncify/options/paths/config.md",
          "default": "config/*.json"
        },
        "blocks": {
          "markdownDescription": "./descriptions/syncify/options/paths/blocks.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": ["blocks/*.liquid"]
        },
        "locales": {
          "markdownDescription": "./descriptions/syncify/options/paths/locales.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "locales/*.json"
        },
        "layout": {
          "markdownDescription": "./descriptions/syncify/options/paths/layout.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "layout/*.liquid"
        },
        "schema": {
          "markdownDescription": "./descriptions/syncify/options/paths/schema.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "schema/*.json"
        },
        "snippets": {
          "default": "source/snippets/*.{liquid}",
          "type": ["string", "array", "object"],
          "markdownDescription": "./descriptions/syncify/options/paths/snippets.md",
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    }
                  }
                ]
              }
            },
            {
              "type": "object",
              "properties": {
                "*": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Uses the filename as per the source, identical behaviour as that of `[name]`."
                },
                "[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Use the filename as per the source. Passing `[name]` only will result in fallback behaviour, as that of `'*'`."
                },
                "[dir]-[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix directory name and suffix filename in **kebab-case** format."
                },
                "[dir]_[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix directory name and suffix filename in **snake_case** format."
                },
                "[name]-[dir]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix filename and suffix directory in **kebab-case** format."
                },
                "[name]_[dir]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix filename and suffix directory in **snake_case** format."
                },
                "[name].[dir]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix filename and suffix directory in **dot** format."
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sections": {
          "default": "source/sections/*.{liquid,json}",
          "type": ["string", "array", "object"],
          "markdownDescription": "./descriptions/syncify/options/paths/sections.md",
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    }
                  }
                ]
              }
            },
            {
              "type": "object",
              "properties": {
                "*": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Uses the filename as per the source, identical behaviour as that of `[name]`."
                },
                "[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Use the filename as per the source. Passing `[name]` only will result in fallback behaviour, as that of `'*'`."
                },
                "[dir]-[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix directory name and suffix filename in **kebab-case** format."
                },
                "[dir]_[name]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix directory name and suffix filename in **snake_case** format."
                },
                "[name]-[dir]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix filename and suffix directory in **kebab-case** format."
                },
                "[name]_[dir]": {
                  "oneOf": [
                    {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
                      }
                    }
                  ],
                  "markdownDescription": "Prefix filename and suffix directory in **snake_case** format."
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "templates": {
          "markdownDescription": "./descriptions/syncify/options/paths/templates.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": [
            "templates/*.json",
            "templates/*.liquid"
          ]
        },
        "customers": {
          "markdownDescription": "./descriptions/syncify/options/paths/customers.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": [
            "templates/customers/*.json",
            "templates/customers*.liquid"
          ]
        },
        "metaobject": {
          "markdownDescription": "./descriptions/syncify/options/paths/metaobject.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "metaobject/**/*.json"
        },
        "metafields": {
          "markdownDescription": "./descriptions/syncify/options/paths/metafields.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": "metafields/**/*.json"
        },
        "pages": {
          "markdownDescription": "./descriptions/syncify/options/paths/pages.md",
          "type": ["string", "array"],
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]{1,}(\\/[!*a-zA-Z0-9_-]{1,}){1,}([.a-z]{1,})?$"
              }
            }
          ],
          "default": ["pages/**/*.html", "pages/**/*.md"]
        },
        "redirects": {
          "markdownDescription": "./descriptions/syncify/options/paths/redirects.md",
          "type": "string",
          "default": "redirects.yaml"
        }
      }
    },
    "spawn": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "./descriptions/syncify/options/spawn.md",
      "properties": {
        "watch": {
          "type": "object",
          "markdownDescription": "./descriptions/syncify/options/spawn/watch.md",
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        },
        "build": {
          "type": "object",
          "markdownDescription": "./descriptions/syncify/options/spawn/build.md",
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        }
      }
    },
    "stores": {
      "type": "object",
      "markdownDescription": "./descriptions/syncify/stores.md",
      "additionalProperties": {
        "type": "object",
        "patternProperties": {
          "[a-z]+": {
            "type": "number",
            "markdownDescription": "./descriptions/syncify/themes.md"
          }
        }
      },
      "propertyNames": {
        "pattern": "[a-z0-9-]+|[a-z0-9-]+\\.myshopify\\.com"
      }
    },
    "hot": {
      "markdownDescription": "./descriptions/syncify/options/hot.md",
      "default": {
        "server": 41001,
        "socket": 51001,
        "label": true,
        "eject": true,
        "method": "hot",
        "layouts": ["theme.liquid"],
        "flags": ["--no-preview-bar"]
      },
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "label": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "./descriptions/syncify/options/hot/label.md"
            },
            "eject": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "./descriptions/syncify/options/hot/eject.md"
            },
            "layouts": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": ["theme.liquid"],
              "markdownDescription": "./descriptions/syncify/options/hot/layouts.md"
            },
            "server": {
              "type": "integer",
              "default": 41001,
              "markdownDescription": "./descriptions/syncify/options/hot/server.md"
            },
            "socket": {
              "type": "integer",
              "default": 51001,
              "markdownDescription": "./descriptions/syncify/options/hot/socket.md"
            },
            "method": {
              "type": "string",
              "enum": ["hot", "reload", "refresh"],
              "default": "hot",
              "markdownDescription": "./descriptions/syncify/options/hot/method.md"
            },
            "flags": {
              "type": "array",
              "default": ["--no-preview-bar"],
              "markdownDescription": "./descriptions/syncify/options/hot/flags.md",
              "items": {
                "type": "string",
                "enum": [
                  "--no-preview-bar",
                  "--no-web-pixels-manager",
                  "--no-checkout-preloads",
                  "--no-shopify-features",
                  "--no-trekkie",
                  "--no-perfkit"
                ]
              },
              "uniqueItems": true,
              "minItems": 0,
              "maxItems": 6
            }
          }
        },
        {
          "type": "boolean",
          "default": false
        }
      ]
    },
    "style": {
      "type": "object",
      "required": ["input"],
      "additionalProperties": false,
      "properties": {
        "input": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "markdownDescription": "./descriptions/syncify/options/transform/style/input.md"
        },
        "watch": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "./descriptions/syncify/options/transform/style/watch.md"
        },
        "rename": {
          "type": "string",
          "markdownDescription": "./descriptions/syncify/options/transform/style/rename.md"
        },
        "snippet": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/syncify/options/transform/style/snippet.md"
        },
        "tailwind": {
          "type": "boolean",
          "markdownDescription": "./descriptions/syncify/options/transform/style/tailwind.md"
        },
        "postcss": {
          "oneOf": [
            {
              "type": "boolean"
            }
          ],
          "default": true,
          "markdownDescription": "./descriptions/syncify/options/transform/style/postcss.md"
        },
        "sass": {
          "markdownDescription": "./descriptions/syncify/options/transform/style/sass.md",
          "oneOf": [
            {
              "type": "boolean",
              "default": true
            },
            {
              "type": "object",
              "properties": {
                "include": {
                  "type": "array",
                  "default": [],
                  "markdownDescription": "A list of paths to include, ie: node_modules.",
                  "items": {
                    "type": "string"
                  }
                },
                "style": {
                  "type": "string",
                  "markdownDescription": "The style compiled CSS should be output.",
                  "default": "compressed",
                  "enum": ["compressed", "expanded"]
                },
                "warnings": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Whether or not to print warnings to CLI - Warnings will require an stdin invocation to view in Syncify, which logs will instruct upon.. Setting this to `false` will hide warnings all together."
                },
                "sourcemaps": {
                  "type": "boolean",
                  "markdownDescription": "Whether or not to generate sourcemaps. Syncify will write sourcemaps within `node_modules/.syncify` and handle processing for you. Setting this to `false` will effectively disable sourcemap generation, generally not preferred as Syncify is pre-configured to reason about with sourcemaps on your behalf.",
                  "default": true
                },
                "quietDeps": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "This option is passed to SASS Dart compile instance. If this option is set to `true`, Sass won’t print warnings that are caused by dependencies. A `dependency` is defined as any file that’s loaded through external sources."
                }
              }
            }
          ]
        }
      }
    },
    "script": {
      "type": "object",
      "required": ["input"],
      "additionalProperties": false,
      "properties": {
        "input": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "markdownDescription": "./descriptions/syncify/options/transform/script/input.md"
        },
        "target": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "es3",
              "es5",
              "es6",
              "es2015",
              "es2016",
              "es2017",
              "es2018",
              "es2019",
              "es2020",
              "es2021",
              "es2022",
              "esnext"
            ]
          },
          "default": "es2016",
          "markdownDescription": "./descriptions/syncify/options/transform/script/target.md"
        },
        "external": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "./descriptions/syncify/options/transform/script/external.md"
        },
        "rename": {
          "type": "string",
          "markdownDescription": "./descriptions/syncify/options/transform/script/rename.md"
        },
        "snippet": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/syncify/options/transform/script/snippet.md"
        },
        "format": {
          "type": "string",
          "default": "esm",
          "enum": ["esm", "iife"],
          "markdownDescription": "./descriptions/syncify/options/transform/script/format.md"
        },
        "sourcemap": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/syncify/options/transform/script/sourcemap.md"
        },
        "watch": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "./descriptions/syncify/options/transform/script/watch.md"
        },
        "esbuild": {
          "type": ["boolean", "object"],
          "default": true,
          "markdownDescription": "./descriptions/syncify/options/transform/script/esbuild.md"
        }
      }
    },
    "svg": {
      "type": "object",
      "required": ["input"],
      "properties": {
        "input": {
          "markdownDescription": "./descriptions/syncify/options/transform/svg/input.md",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "rename": {
          "type": "string",
          "markdownDescription": "./descriptions/syncify/options/transform/svg/rename.md"
        },
        "snippet": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/syncify/options/transform/svg/rename.md"
        },
        "format": {
          "oneOf": [
            {
              "type": "string",
              "enum": ["file", "sprite"]
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "./descriptions/syncify/options/transform/svg/format.md"
        }
      }
    },
    "json": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "crlf": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If line termination should be Windows (CRLF) format. Unix (LF) format is the default."
        },
        "indent": {
          "type": "number",
          "default": 2,
          "markdownDescription": "The indentation level"
        },
        "useTab": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to use tabbed `\\t` identation characters. When `true`, tabs will apply at the division of `2` relative to the `indent` option value."
        },
        "stripComments": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether or not comments should be stripped or preserved. This effects how Syncify handles both local and remote sources."
        },
        "sortObjects": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether or not Syncify should apply alpha-numeric sorting to object properties or not. This will apply deep sorting, so all objects within a structure will adhere."
        },
        "sortExclude": {
          "type": "array",
          "default": [],
          "markdownDescription": "Define a list of property names with object values that should be excluded and skipped from sorting. This option only applies when `sortObjects` is set to `true` and will have no effect if `sortObjects` is not enabled.",
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "type": "array",
          "default": [],
          "markdownDescription": "An optional string list of paths/filenames to exclude from processing, i.e: pass through",
          "items": {
            "type": "string"
          }
        },
        "terse": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "properties": {
                "assets": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `.json` files writing to `theme/assets`"
                },
                "config": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `settings_schema.json` and `settings_data.json` config files."
                },
                "locales": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `locale` and `.json` files."
                },
                "metafields": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `metafield` and `.json` files."
                },
                "metaobject": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `metaobject` and `.json` files."
                },
                "groups": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify section group `.json` files"
                },
                "templates": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minify `template` and `.json` files."
                },
                "exclude": {
                  "type": "array",
                  "default": [],
                  "markdownDescription": "An optional list of paths/files to exclude from minification.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "liquid": {
      "type": "object",
      "properties": {
        "terse": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "properties": {
                "stripTrims": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Removes redundant whitespace Liquid dash trims from Liquid tags and objects."
                },
                "minifyJS": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minifies inner contents of `<script>` and `{% javascript %}` tags"
                },
                "minifyCSS": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minifies inner contents of `<style>`, `{% style %}` and `{% stylesheet %}` tags"
                },
                "minifySchema": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Minifies inner contents of `{% schema %}` tags"
                },
                "removeComments": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Remove all occurrences of HTML and Liquid comments"
                },
                "collapseWhitespace": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "Collapse all whitespace and newlines"
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "markdownDescription": "Excluded files from minification"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "transform": {
      "type": "object",
      "markdownDescription": "./descriptions/syncify/options/transform.md",
      "additionalProperties": false,
      "properties": {
        "json": {
          "markdownDescription": "./descriptions/syncify/options/transform/json.md",
          "$ref": "#/definitions/json"
        },
        "liquid": {
          "markdownDescription": "./descriptions/syncify/options/transform/liquid.md",
          "$ref": "#/definitions/liquid"
        },
        "script": {
          "markdownDescription": "./descriptions/syncify/options/transform/script.md",
          "oneOf": [
            {
              "type": "object",
              "propertyNames": {
                "pattern": "(assets|snippets)/[@a-z0-9_$.-[\\]]+",
                "markdownDescription": "./descriptions/syncify/options/transform/script/input-pattern.md"
              },
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/script"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/script"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/script"
              }
            }
          ]
        },
        "style": {
          "markdownDescription": "./descriptions/syncify/options/transform/style.md",
          "oneOf": [
            {
              "type": "object",
              "propertyNames": {
                "pattern": "(assets|snippets)/[@a-z0-9_$.-[\\]]+",
                "markdownDescription": "./descriptions/syncify/options/transform/style/input-pattern.md"
              },
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/style"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/style"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/style"
              }
            }
          ]
        },
        "svg": {
          "markdownDescription": "./descriptions/syncify/options/transform/svg.md",
          "oneOf": [
            {
              "type": "object",
              "propertyNames": {
                "pattern": "(assets|snippets)/[@a-z0-9_$.-[\\]]+",
                "markdownDescription": "./descriptions/syncify/options/transform/svg/input-pattern.md"
              },
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/svg"
                  }
                ]
              }
            },
            {
              "$ref": "#/definitions/svg"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/svg"
              }
            }
          ]
        }
      }
    },
    "processor": {
      "type": "object",
      "properties": {
        "esbuild": {
          "type": "object"
        },
        "sass": {
          "type": "object"
        },
        "svgo": {
          "type": "object"
        },
        "postcss": {
          "type": "array"
        }
      }
    }
  }
}
