{
  "$schema": "http://json-schema.org/draft-07/schema",
  "properties": {
    "wrap": {
      "type": "number",
      "default": 0,
      "markdownDescription": "./descriptions/format/global/wrap.md"
    },
    "wrapFraction": {
      "type": "number",
      "default": 0,
      "markdownDescription": "./descriptions/format/global/wrapFraction.md"
    },
    "language": {
      "enum": [
        "auto",
        "text",
        "html",
        "liquid",
        "javascript",
        "jsx",
        "typescript",
        "tsx",
        "json",
        "css",
        "scss",
        "less",
        "xml"
      ],
      "default": "auto",
      "markdownDescription": "./descriptions/format/global/language.md"
    },
    "indentSize": {
      "type": "number",
      "default": 2,
      "markdownDescription": "./descriptions/format/global/indentSize.md"
    },
    "indentChar": {
      "type": "string",
      "default": " ",
      "markdownDescription": "./descriptions/format/global/indentChar.md"
    },
    "indentLevel": {
      "type": "number",
      "default": 0,
      "markdownDescription": "./descriptions/format/global/indentLevel.md"
    },
    "preserveLine": {
      "type": "number",
      "default": 3,
      "markdownDescription": "./descriptions/format/global/preserveLine.md"
    },
    "endNewline": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "./descriptions/format/global/endNewline.md"
    },
    "crlf": {
      "type": "boolean",
      "default": false,
      "markdownDescription": "./descriptions/format/global/crlf.md"
    },
    "preset": {
      "enum": [
        "default",
        "recommended",
        "warrington",
        "strict",
        "shopify"
      ],
      "default": "default",
      "markdownDescription": "./descriptions/format/global/preset.md"
    },
    "liquid": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "Beautification rules applied to **Liquid**",
      "properties": {
        "argumentLineBreak": {
          "type": "number",
          "default": 0,
          "markdownDescription": "./descriptions/format/liquid/argumentLineBreak.md"
        },
        "delimiterTrims": {
          "type": "string",
          "enum": [
            "preserve",
            "tags",
            "outputs",
            "never",
            "always",
            "multiline"
          ],
          "default": "preserve",
          "markdownDescription": "./descriptions/format/liquid/delimiterTrims.md"
        },
        "delimiterPlacement": {
          "type": "string",
          "enum": [
            "preserve",
            "inline",
            "consistent",
            "force",
            "force-multiline"
          ],
          "default": "preserve",
          "markdownDescription": "./descriptions/format/liquid/delimiterPlacement.md"
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/liquid/commentIndent.md"
        },
        "commentPreserve": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/liquid/commentPreserve.md"
        },
        "filterLineBreak": {
          "type": "number",
          "default": 0,
          "markdownDescription": "./descriptions/format/liquid/filterLineBreak.md"
        },
        "dedentTagList": {
          "type": "array",
          "default": [],
          "markdownDescription": "./descriptions/format/liquid/dedentTagList.md",
          "items": {
            "type": "string",
            "additionalItems": true,
            "uniqueItems": true,
            "not": {
              "enum": ["comment"]
            },
            "enum": [
              "form",
              "paginate",
              "capture",
              "case",
              "for",
              "if",
              "raw",
              "tablerow",
              "liquid",
              "unless",
              "schema",
              "style",
              "script",
              "stylesheet",
              "javascript"
            ]
          }
        },
        "ignoreTagList": {
          "type": "array",
          "default": [],
          "markdownDescription": "./descriptions/format/liquid/ignoreTagList.md",
          "items": {
            "type": "string",
            "additionalItems": true,
            "uniqueItems": true,
            "not": {
              "enum": ["comment"]
            },
            "enum": [
              "form",
              "paginate",
              "capture",
              "case",
              "for",
              "if",
              "raw",
              "tablerow",
              "liquid",
              "unless",
              "schema",
              "style",
              "script",
              "stylesheet",
              "javascript"
            ]
          }
        },
        "indentAttribute": {
          "default": false,
          "type": "boolean",
          "markdownDescription": "./descriptions/format/liquid/indentAttribute.md"
        },
        "lineBreakSeparator": {
          "default": "after",
          "type": "string",
          "markdownDescription": "./descriptions/format/liquid/lineBreakSeparator.md",
          "enum": ["before", "after"]
        },
        "equipoiseSpacing": {
          "default": true,
          "type": "boolean",
          "markdownDescription": "./descriptions/format/liquid/equipoiseSpacing.md"
        },
        "preserveInternal": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/liquid/preserveInternal.md"
        },
        "quoteConvert": {
          "default": "none",
          "type": "string",
          "markdownDescription": "./descriptions/format/liquid/quoteConvert.md",
          "enum": ["none", "double", "single"]
        },

        "commentNewline": {
          "deprecationMessage": "./descriptions/format/deprecated/liquid/commentNewline.md"
        },
        "forceArgument": {
          "deprecationMessage": "./descriptions/format/deprecated/liquid/forceArgument.md"
        },
        "forceFilter": {
          "deprecationMessage": "./descriptions/format/deprecated/liquid/forceFilter.md"
        },
        "preserveComment": {
          "deprecationMessage": "./descriptions/format/deprecated/liquid/preserveComment.md"
        },
        "normalizeSpacing": {
          "deprecationMessage": "./descriptions/format/deprecated/liquid/normalizeSpacing.md"
        }
      }
    },
    "markup": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "Beautification rules applied to the following markup languages:\n\n- **HTML**\n- **Liquid**\n- **XML**\n- **XHTML**",
      "properties": {
        "attributeCasing": {
          "type": "string",
          "default": "preserve",
          "markdownDescription": "./descriptions/format/markup/attributeCasing.md",
          "enum": [
            "preserve",
            "lowercase",
            "lowercase-name",
            "lowercase-value"
          ]
        },
        "attributeLineBreak": {
          "type": ["boolean", "number"],
          "default": false,
          "markdownDescription": "./descriptions/format/markup/attributeLineBreak.md"
        },
        "attributePreserve": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/attributePreserve.md"
        },
        "attributeSort": {
          "type": ["boolean", "array"],
          "default": false,
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "boolean"
            }
          ],
          "markdownDescription": "./descriptions/format/markup/attributeSort.md"
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/commentIndent.md"
        },
        "commentDelimiter": {
          "enum": [
            "preserve",
            "inline",
            "inline-align",
            "force",
            "consistent"
          ],
          "default": "preserve",
          "markdownDescription": "./descriptions/format/markup/commentDelimiter.md"
        },
        "commentPreserve": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/commentPreserve.md"
        },
        "delimiterTerminus": {
          "enum": ["inline", "force", "adapt"],
          "default": "inline",
          "markdownDescription": "./descriptions/format/markup/delimiterTerminus.md"
        },
        "forceIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/forceIndent.md"
        },
        "ignoreJS": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/format/markup/ignoreJS.md"
        },
        "ignoreJSON": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/format/markup/ignoreJSON.md"
        },
        "ignoreCSS": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/format/markup/ignoreCSS.md"
        },
        "preserveText": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/format/markup/preserveText.md"
        },
        "selfCloseSpace": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/selfCloseSpace.md"
        },
        "selfCloseSVG": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/selfCloseSVG.md"
        },
        "stripAttributeLines": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/stripAttributeLines.md"
        },
        "stripTextWrapLines": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/markup/stripTextWrapLines.md"
        },
        "quoteConvert": {
          "default": "none",
          "type": "string",
          "markdownDescription": "./descriptions/format/markup/quoteConvert.md",
          "enum": ["none", "double", "single"]
        },
        "valueLineBreak": {
          "enum": [
            "preserve",
            "inline",
            "force-align",
            "force-indent"
          ],
          "default": "preserve",
          "markdownDescription": "./descriptions/format/markup/valueLineBreak.md"
        },
        "valueSpacing": {
          "enum": [
            "preserve",
            "equipoise",
            "wrap",
            "wrap-fraction"
          ],
          "default": "preserve",
          "markdownDescription": "./descriptions/format/markup/valueSpacing.md"
        },

        "commentNewline": {
          "deprecationMessage": "./descriptions/format/deprecated/markup/commentNewline.md"
        },
        "commentDelimiters": {
          "deprecationMessage": "./descriptions/format/deprecated/markup/commentDelimiters.md"
        },
        "forceAttribute": {
          "deprecationMessage": "./descriptions/format/deprecated/markup/forceAttribute.md"
        },
        "preserveComment": {
          "deprecationMessage": "./descriptions/format/deprecated/markup/preserveComment.md"
        },
        "preserveAttribute": {
          "deprecationMessage": "./descriptions/format/deprecated/markup/preserveAttribute.md"
        }
      }
    },
    "script": {
      "type": "object",
      "markdownDescription": "**!! USE WITH CAUTION !!**\n\n_Æsthetic script language formatting is not yet stable, use with caution_\n\n---\n\nBeautification rules for the following _script_ languages:\n\n- **JavaScript**\n- **TypeScript**\n\n Options provided here will also be applied to following markup embedded language blocks.",
      "properties": {
        "braceAllman": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "markdownDescription": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "braceNewline": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "markdownDescription": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "bracePadding": {
          "type": "boolean",
          "default": false,
          "title": "Brace Padding",
          "markdownDescription": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings"
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/script/commentIndent.md"
        },
        "commentNewline": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/script/commentNewline.md"
        },
        "caseSpace": {
          "type": "boolean",
          "default": false,
          "title": "Space Following Case",
          "markdownDescription": "If the colon separating a case's expression (of a switch/case block) from its statement should be followed by a space instead of indentation, thereby keeping the case on a single line of code"
        },
        "elseNewline": {
          "type": "boolean",
          "default": false,
          "title": "Else On New Line",
          "markdownDescription": "If else_line is true then the keyword 'else' is forced onto a new line."
        },
        "endComma": {
          "type": "string",
          "default": "none",
          "title": "Trailing Comma",
          "markdownDescription": "If there should be a trailing comma in arrays and objects",
          "enum": ["none", "never", "always"]
        },
        "arrayFormat": {
          "type": "string",
          "default": "default",
          "markdownDescription": "**_ARRAY FORMAT_**\n\n_Determines if all array indexes should be indented, never indented, or left to the default. The `default` option will leave array indexes intact and not apply any formatting._\n\n---\n#### `inline`&nbsp;&nbsp;&nbsp;👎\nEnsure all array indexes appear on a single line\n```json\n\n{\n  \"object\": [1,2,3,4]\n}\n\n```\n---\n#### `indent`&nbsp;&nbsp;&nbsp;👍\nAlways indent each index of an array\n\n```json\n\n{\n  \"object\": [\n    1,\n    2,\n    3,\n    4\n  ]\n}\n\n```",
          "enum": ["default", "indent", "inline"]
        },
        "objectIndent": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "markdownDescription": "Determines if all object keys should be indented, never indented, or left to the default",
          "enum": ["default", "indent", "inline"]
        },
        "functionNameSpace": {
          "type": "boolean",
          "default": false,
          "title": "Space After Function Name",
          "markdownDescription": "If a space should follow a JavaScript function name"
        },
        "methodChain": {
          "type": "number",
          "default": 3,
          "markdownDescription": "**_METHOD CHAINING_**\n\n_When to break consecutively chained methods and properties onto separate lines. A negative value (eg: `-1`) disables this option. A value of `0` ensures method chains are never broken_\n\n---\n#### `0`\nPassing a value of `0` will never break chained methods.\n```js\n\nwindow.property.method(() => {}).foo(() => {})\n\n\n```\n\n---\n\n#### `3` (default)\nWhen there are more than `3` methods and/or properties they will be split onto separate lines.\n```js\n\nwindow\n  .property\n  .method(() => {})\n  .foo(() => {})\n\n\n```"
        },
        "neverFlatten": {
          "type": "boolean",
          "default": false,
          "title": "Never Flatten Destructured Lists",
          "markdownDescription": "If destructured lists in script should never be flattend"
        },
        "noCaseIndent": {
          "type": "boolean",
          "default": false,
          "title": "Case Indentation",
          "markdownDescription": "If a case statement should receive the same indentation as the containing switch block."
        },
        "noSemicolon": {
          "type": "boolean",
          "default": false,
          "title": "No Semicolons",
          "markdownDescription": "Removes semicolons that would be inserted by ASI. This option is in conflict with option 'correct' and takes precedence over conflicting features. Use of this option is a possible security/stability risk"
        },
        "objectSort": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**_OBJECT SORT_**\n\n_This option will alphabetically sort object properties (keys). This can be an expensive operation when dealing with large objects with over 2k properties._\n\n---\n#### Disabled&nbsp;&nbsp;&nbsp;👍\nWhen disabled, ie: `false` properties will not be sorted.\n```js\n\n{\n  e: \"5\",\n  b: \"2\",\n  d: \"4\",\n  a: \"1\",\n  f: \"6\",\n  c: \"3\"\n}\n\n\n```\n\n---\n\n#### Enabled&nbsp;&nbsp;&nbsp;👎\nWhen set to `true` all properties are alphanumerically sorted\n```js\n\n{\n  a: \"1\",\n  b: \"2\",\n  c: \"3\",\n  d: \"4\",\n  e: \"5\",\n  f: \"6\"\n}\n\n\n```"
        },
        "preserveComment": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/script/preserveComment.md"
        },
        "quoteConvert": {
          "default": "none",
          "title": "Convert Quotes",
          "markdownDescription": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "type": "string",
          "enum": ["double", "single", "none"]
        },
        "functionSpace": {
          "type": "boolean",
          "default": false,
          "title": "Function Space",
          "markdownDescription": "Inserts a space following the function keyword for anonymous functions"
        },
        "ternaryLine": {
          "type": "boolean",
          "default": false,
          "title": "Keep Ternary Statements On One Line",
          "markdownDescription": "If ternary operators in JavaScript ? and : should remain on the same line"
        },
        "variableList": {
          "type": "boolean",
          "default": false,
          "title": "Variable Declaration Lists",
          "markdownDescription": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated"
        },
        "vertical": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**_VERTICAL LIST_**\n\n_If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated_\n\n---\n#### Before Formatting\nBelow is an example of how this rule works if it's enabled, ie: `true`\n```js\n\nconst object = {\n  someProperty: 'x',\n  anotherProperty: 'x',\n  fooProperty: 'x'\n};\n\n\n```\n\n---\n\n#### After Formatting\nAfter formatting all declaration lists will be aligned in a vertical manner.\n```js\n\nconst object = {\n  someProperty    : 'x',\n  anotherProperty : 'x',\n  fooProperty     : 'x'\n};\n\n\n```"
        }
      }
    },
    "style": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "Beautification rules for the following _style_ languages:\n\n- **CSS**\n- **SCSS**\n- **SASS**\n- **LESS**\n\n. Options provided here will also be applied to the following markup embedded language blocks.",
      "properties": {
        "atRuleSpace": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/atRuleSpace.md"
        },
        "commentNewline": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "This will determine whether comments should always start at position `0` of each line or if comments should be indented according to the code."
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/commentIndent.md"
        },
        "correct": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/correct.md"
        },
        "sortSelectors": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/sortSelectors.md"
        },
        "sortProperties": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/sortProperties.md"
        },
        "classPadding": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/classPadding.md"
        },
        "noLeadZero": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/noLeadZero.md"
        },
        "preserveComment": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/style/preserveComment.md"
        },
        "quoteConvert": {
          "default": "none",
          "markdownDescription": "./descriptions/format/style/quoteConvert.md",
          "type": "string",
          "enum": ["none", "double", "single"]
        }
      }
    },
    "json": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "Beautification rules for the **JSON** language. Options provided here will also be applied to markup embedded language blocks.",
      "properties": {
        "arrayFormat": {
          "type": "string",
          "default": "indent",
          "markdownDescription": "./descriptions/format/json/arrayFormat.md",
          "enum": ["default", "indent", "inline"]
        },
        "braceAllman": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "./descriptions/format/json/braceAllman.md"
        },
        "bracePadding": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/json/bracePadding.md"
        },
        "objectIndent": {
          "type": "string",
          "default": "indent",
          "markdownDescription": "./descriptions/format/json/objectIndent.md",
          "enum": ["default", "indent", "inline"]
        },
        "objectSort": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "./descriptions/format/json/objectSort.md"
        }
      }
    }
  }
}
